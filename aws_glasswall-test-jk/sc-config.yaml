global:
  ck8sVersion:
  cloudProvider: aws
  environmentName: glasswall-test
  dnsPrefix: glasswall-test
  baseDomain: ops.glasswall-ck8s-proxy.com
  opsDomain: ops.glasswall-ck8s-proxy.com
  issuer: letsencrypt-prod
  verifyTls: false
  storageClass: ebs-gp2
  clusterDns: "10.43.0.10"
s3:
  region: us-west-1
  regionAddress: s3.us-west-1.amazonaws.com
  regionEndpoint: https://s3.us-west-1.amazonaws.com
  buckets:
    harbor: "glasswall-test-harbor"
    velero: "glasswall-test-velero"
    elasticsearch: "glasswall-test-es-backup"
    influxDB: "glasswall-test-influxdb"
    scFluentd: "glasswall-test-sc-logs"
user:
  grafana:
    enabled: true
    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi
    tolerations: []
    affinity: {}
    nodeSelector: {}
  # Todo remove dependencie on alertmanager from service cluster
  alertmanager:
    enabled: false
    ingress:
      enabled: false
harbor:
  enabled: true
  tolerations: []
  affinity: {}
  nodeSelector: {}
  chartmuseum:
    persistentVolumeClaim:
      size: 5Gi
  core:
    resources:
      requests:
        memory: 256Mi
        cpu: 100m
      limits:
        memory: 512Mi
        cpu: 200m
  database:
    persistentVolumeClaim:
      size: 1Gi
  jobservice:
    persistentVolumeClaim:
      size: 1Gi
    resources:
      requests:
        memory: 256Mi
        cpu: 100m
      limits:
        memory: 512Mi
        cpu: 200m
  registry:
    persistentVolumeClaim:
      size: 5Gi
    resources:
      requests:
        memory: 256Mi
        cpu: 100m
      limits:
        memory: 512Mi
        cpu: 200m
  redis:
    persistentVolumeClaim:
      size: 1Gi
  notary:
    resources:
      requests:
        memory: 256Mi
        cpu: 100m
      limits:
        memory: 512Mi
        cpu: 200m
  persistence:
    type: s3
    disableRedirect: false
prometheus:
  storage:
    size: 2Gi
  retention:
    size: 1GiB
    age: 3d
    alertmanager: 72h
  resources:
    requests:
      memory: 1Gi
      cpu: 300m
    limits:
      memory: 2Gi
      cpu: "1"
  tolerations: []
  affinity: {}
  nodeSelector: {}
  wcScraper:
    resources:
      requests:
        memory: 1Gi
        cpu: 300m
      limits:
        memory: 2Gi
        cpu: "1"
    tolerations: []
    affinity: {}
    nodeSelector: {}
dex:
  # supported: google|aaa
  oidcProvider: google
  allowedDomains:
    - example.com
  enableStaticLogin: true
  resources:
    limits:
      cpu: 100m
      memory: 50Mi
    requests:
      cpu: 100m
      memory: 50Mi
  tolerations: []
  affinity: {}
  nodeSelector: {}
elasticsearch:
  sso:
    enabled: false
  masterNode:
    count: 1
    storageSize: 1Gi
    javaOpts: "-Xms512m -Xmx512m"
    resources:
      requests:
        memory: 1024Mi
        cpu: 100m
      limits:
        memory: 1024Mi
        cpu: 1
  dataNode:
    count: 2
    storageSize: 18Gi
    javaOpts: "-Xms512m -Xmx512m"
    resources:
      requests:
        memory: 1024Mi
        cpu: 200m
      limits:
        memory: 1024Mi
        cpu: 1
  clientNode:
    count: 1
    javaOpts: "-Xms512m -Xmx512m"
    resources:
      requests:
        memory: 1024Mi
        cpu: 200m
      limits:
        memory: 1024Mi
        cpu: 1
  storageClass: ebs-gp2
  retention:
    kubeAuditSize: 4
    kubeAuditAge: 3
    kubernetesSize: 10
    kubernetesAge: 3
    otherSize: 1
    otherAge: 7
    rolloverSize: 1
    rolloverAge: 1
  snapshot:
    min: 7
    max: 14
    ageSeconds: 864000
    retentionSchedule: "@daily"
    backupSchedule: "0 */2 * * *"
  extraRoleMappings: []
  #- mapping_name: readall_and_monitor
  #  definition:
  #    users:
  #      - "Developer Name"
  tolerations: []
  affinity: {}
  nodeSelector: {}
  snapshotRepository: s3_aws_7.x
  useRegionEndpoint: false
fluentd:
  resources:
    limits:
      cpu: 500m
      memory: 200Mi
    requests:
      cpu: 100m
      memory: 200Mi
  tolerations: []
  affinity: {}
  nodeSelector: {}
  aggregator:
    resources:
      limits:
        cpu: 500m
        memory: 1000Mi
      requests:
        cpu: 300m
        memory: 300Mi
    tolerations: []
    affinity: {}
    nodeSelector: {}
logRetention:
  days: 7
influxDB:
  user: "admin"
  address: "influxdb.influxdb-prometheus.svc:8088"
  retention:
    ageWc: 2d
    ageSc: 3d
  metrics:
    sizeWc: 5000000
    sizeSc: 5000000
  resources:
    requests:
      memory: 4Gi
      cpu: 0.5
    limits:
      memory: 4Gi
      cpu: 2
  persistence:
    size: 10Gi
  tolerations: []
  affinity: {}
  nodeSelector: {}
alerts:
  alertTo: "null"
  opsGenieHeartbeat:
    enabled: false
    url: "https://api.eu.opsgenie.com/v2/heartbeats"
    name: "set-me"
  slack:
    channel: "set-me"
  opsGenie:
    apiUrl: "https://api.eu.opsgenie.com"
ck8sdash:
  enabled: true
  tolerations: []
  affinity: {}
  nodeSelector: {}
  nginx:
    resources:
      requests:
        memory: 64Mi
        cpu: 50m
      limits:
        memory: 128Mi
        cpu: 100m
  server:
    resources:
      requests:
        memory: 64Mi
        cpu: 50m
      limits:
        memory: 128Mi
        cpu: 100m
externalTrafficPolicy:
  local: false
  whitelistRange:
    global: "0.0.0.0/0"
    ck8sdash: false
    dex: false
    kibana: false
    elasticsearch: false
    harbor: false
    userGrafana: false
    opsGrafana: false
    prometheusWc: false
nfsProvisioner:
  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 128Mi
  tolerations: []
  affinity: {}
  nodeSelector: {}
nginxIngress:
  controller:
    # Chart deploys correctly but does not work with resourceRequests
    resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 64Mi
    # requests:
    #   cpu: 100m
    #   memory: 64Mi
    tolerations:
      - key: "nodeType"
        operator: "Exists"
        effect: "NoSchedule"
    affinity: {}
    nodeSelector: {}
    config:
      useProxyProtocol: false
    daemonset:
      useHostPort: false
    service:
      enabled: true
      type: LoadBalancer
      annotations: 'service.beta.kubernetes.io/aws-load-balancer-type: nlb'
  defaultBackend:
    # Chart deploys correctly but does not work with resourceRequests
    resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 64Mi
    # requests:
    #   cpu: 100m
    #   memory: 64Mi
    tolerations:
      - key: "nodeType"
        operator: "Equal"
        value: "elastisys"
        effect: "NoSchedule"
    affinity: {}
    nodeSelector: {}
velero:
  tolerations: []
  nodeSelector: {}
  resources:
    limits:
      cpu: 200m
      memory: 200Mi
    requests:
      cpu: 100m
      memory: 100Mi
  restic:
    tolerations: []
    resources:
      limits:
        cpu: 200m
        memory: 200Mi
      requests:
        cpu: 100m
        memory: 100Mi
restore:
  cluster: false
  velero: false
  veleroBackupName: latest
issuers:
  letsencrypt:
    enabled: true
    prod:
      email: "set-me"
    staging:
      email: "set-me"
  extraIssuers: []
certmanager:
  resources: {}
  nodeSelector: {}
  tolerations: {}
  affinity: {}
  webhook:
    resources: {}
    nodeSelector: {}
    tolerations: {}
    affinity: {}
  cainjector:
    resources: {}
    nodeSelector: {}
    tolerations: {}
    affinity: {}
