{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Cloudformation template of creating icap servers under Load balancer",
    "Parameters": {
        "InstanceCount": {
            "Type": "String",
            "Default": "4",
            "Description": "Enter No of instances to be created"
        },
        "amiId": {
            "Type": "String",
            "Default": "ami-0bb3e42d9c16e5362",
            "Description": "Enter AMI ID"
        },
        "InstanceSize": {
            "Type": "String",
            "Default": "t3.2xlarge",
            "Description": "Enter Size of Instance"
        },
        "KeyName": {
            "Type": "String",
            "Default": "packer-glasswall-elastisys",
            "Description": "Enter SSH Key pair Name"
        },
        "ElasticIp": {
            "Type": "String",
            "Default": "eipalloc-0c57d6f6b08d26527",
            "Description": "Enter allocationId of Elastic IP for Load Balancer"
        },
        "TagName": {
            "Type": "String",
            "Default": "cf-created-ec2",
            "Description": "Enter the default Tag name for the EC2 instances"
        },
        "TargetGroupName": {
            "Type": "String",
            "Default": "CompliantK8sICAPLBTargetGroup",
            "Description": "Enter the Target Group Name"
        },
        "icapLbName": {
            "Type": "String",
            "Default": "CompliantK8sICAPLB",
            "Description": "Enter the Target Group Name"
        },
        "Ec2RootVolumeSize": {
            "Description": " Ec2 root volume size",
            "Type": "String",
            "Default": "64"
        },
        "AdaptationServiceImage": {
            "Description": "Docker image for adaptation-service",
            "Type": "String",
            "Default": "glasswallsolutions/icap-adaptation-service:main-718a5ce",
            "ConstraintDescription": "must be a valid image localtion."
        },
        "ArchiveAdaptationServiceImage": {
            "Description": "Docker image for archive-adaptation-service",
            "Type": "String",
            "Default": "glasswallsolutions/archive-adaptation-service:main-ddf071a",
            "ConstraintDescription": "must be a valid image localtion."
        },
        "EventSubmissionServiceImage": {
            "Description": "Docker image for archive-adaptation-service",
            "Type": "String",
            "Default": "glasswallsolutions/event-submission-service:main-de67dec",
            "ConstraintDescription": "must be a valid image localtion."
        },
        "GlasswallIcapAdaptationEventApiImage": {
            "Description": "Docker image for glasswall-icap-adaptation-event-api",
            "Type": "String",
            "Default": "glasswallsolutions/icap-adaptation-service:main-718a5ce",
            "ConstraintDescription": "must be a valid image localtion."
        },
        "MvpIcapServiceImage": {
            "Description": "Docker image for mvp-icap-service",
            "Type": "String",
            "Default": "glasswallsolutions/mvp-icap-service:main-550d0fc",
            "ConstraintDescription": "must be a valid image localtion."
        },
        "PolicyUpdateServiceImage": {
            "Description": "Docker image for policy-update-service",
            "Type": "String",
            "Default": "glasswallsolutions/policy-update-service:main-5a6d7a1",
            "ConstraintDescription": "must be a valid image localtion."
        },
        "IcapRequestProcessingImage": {
            "Description": "Docker image for icap-request-processing",
            "Type": "String",
            "Default": "elastisys/icap-request-processing:v0.2",
            "ConstraintDescription": "must be a valid image localtion."
        }
    },
    "Outputs": {
        "icapLoadBalancerDNSName": {
            "Description": "The DNSName of load balancer",
            "Value": {
                "Fn::GetAtt": [
                    "icapLb",
                    "DNSName"
                ]
            }
        }
    },
    "Resources": {
        "LBVPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": "10.16.0.0/16",
                "InstanceTenancy": "default",
                "EnableDnsSupport": "true",
                "EnableDnsHostnames": "true",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "icapEc2NLBVPC"
                    },
                    {
                        "Key": "CFStack",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ]
            }
        },
        "Subnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "LBVPC"
                },
                "CidrBlock": "10.16.0.0/22",
                "Tags": [
                    {
                        "Key": "CFStack",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ],
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                }
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
                "Tags": [
                    {
                        "Key": "CFStack",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ]
            }
        },
        "AttachGateway": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "LBVPC"
                },
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "LBVPCRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "LBVPC"
                },
                "Tags": [
                    {
                        "Key": "CFStack",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ]
            }
        },
        "LBRoute": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "AttachGateway",
            "Properties": {
                "RouteTableId": {
                    "Ref": "LBVPCRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "SubnetRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "Subnet"
                },
                "RouteTableId": {
                    "Ref": "LBVPCRouteTable"
                }
            }
        },
        "InstanceSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "LBVPC"
                },
                "GroupDescription": "Incoming connections for Icap servers from LB",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "TCP",
                        "FromPort": "1344",
                        "ToPort": "1344",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "TCP",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "TCP",
                        "FromPort": "1345",
                        "ToPort": "1345",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "TCP",
                        "FromPort": "31829",
                        "ToPort": "31829",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "TCP",
                        "FromPort": "7000",
                        "ToPort": "7000",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "icapLb": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "Name": {
                    "Ref": "icapLbName"
                },
                "Scheme": "internet-facing",
                "SubnetMappings": [
                    {
                        "AllocationId": {
                            "Ref": "ElasticIp"
                        },
                        "SubnetId": {
                            "Ref": "Subnet"
                        }
                    }
                ],
                "Type": "network",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "icapLbName"
                        }
                    },
                    {
                        "Key": "CFStack",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ]
            }
        },
        "icapLBListener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "DefaultActions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "icapLBTargetGroup"
                        }
                    }
                ],
                "LoadBalancerArn": {
                    "Ref": "icapLb"
                },
                "Port": 1344,
                "Protocol": "TCP"
            }
        },
        "icapLBTargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "Name": {
                    "Ref": "TargetGroupName"
                },
                "HealthCheckEnabled" : true,
                "HealthCheckIntervalSeconds" : "30",
                "HealthCheckPath" : "/status",
                "HealthCheckPort":7000,
                "HealthCheckProtocol":"HTTP",
                "HealthyThresholdCount":2,
                "UnhealthyThresholdCount":2,
                "Port": 1344,
                "Protocol": "TCP",
                "VpcId": {
                    "Ref": "LBVPC"
                },
                "TargetGroupAttributes": [
                    {
                        "Key": "deregistration_delay.timeout_seconds",
                        "Value": 60
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "TargetGroupName"
                        }
                    },
                    {
                        "Key": "CFStack",
                        "Value": {
                            "Ref": "AWS::StackId"
                        }
                    }
                ]
            }
        },
        "ASGLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "InstanceType": {
                    "Ref": "InstanceSize"
                },
                "AssociatePublicIpAddress": true,
                "SecurityGroups": [
                    {
                        "Ref": "InstanceSecurityGroup"
                    }
                ],
                "ImageId": {
                    "Ref": "amiId"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "DeleteOnTermination": "true",
                            "VolumeSize": {
                                "Ref": "Ec2RootVolumeSize"
                            }
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#cloud-config\n",
                                "\n",
                                "runcmd:\n",
                                "  - sudo /usr/local/bin/cfn-signal -e $? ",
                                "   --stack ", { "Ref": "AWS::StackName" },
                                "   --resource WebServerGroup",
                                "   --region eu-west-1",
                                "\n\n",
                                "glasswall:\n",
                                "  images: \n",
                                "    adaptation-service: ", { "Ref": "AdaptationServiceImage" },"\n",
                                "    archive-adaptation-service: ", { "Ref": "ArchiveAdaptationServiceImage" },"\n",
                                "    event-submission-service: ", { "Ref": "EventSubmissionServiceImage" },"\n",
                                "    glasswall-icap-adaptation-event-api: ", { "Ref": "GlasswallIcapAdaptationEventApiImage" },"\n",
                                "    mvp-icap-service: ", { "Ref": "MvpIcapServiceImage" },"\n",
                                "    policy-update-service: ", { "Ref": "PolicyUpdateServiceImage" },"\n",
                                "    icap-request-processing: ", { "Ref": "IcapRequestProcessingImage" },"\n",
                                "  monitoring:\n",
                                "    username: wcWriter\n",
                                "    password: somelongsecret\n",
                                "  logging:\n",
                                "    username: fluentd\n",
                                "    password: c29tZWxvbmdzZWNyZXQ=\n",
                                "  domain: glasswall-ck8s-proxy.com\n",
                                "  service-cluster: ops.glasswall-ck8s-proxy.com\n"
                            ]
                        ]
                    }
                }
            }
        },
        "InstanceAsg": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "VPCZoneIdentifier": [
                    {
                        "Ref": "Subnet"
                    }
                ],
                "LaunchConfigurationName": {
                    "Ref": "ASGLaunchConfig"
                },
                "MinSize": {
                    "Ref": "InstanceCount"
                },
                "MaxSize": {
                    "Ref": "InstanceCount"
                },
                "DesiredCapacity": {
                    "Ref": "InstanceCount"
                },
                "TargetGroupARNs": [
                    {
                        "Ref": "icapLBTargetGroup"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "TagName"
                        },
                        "PropagateAtLaunch": true
                    },
                    {
                        "Key": "Owner",
                        "Value": "IcapCloudFormation",
                        "PropagateAtLaunch": true
                    },
                    {
                        "Key": "Delete",
                        "Value": "No",
                        "PropagateAtLaunch": true
                    },
                    {
                        "Key": "Team",
                        "Value": "K8-CF",
                        "PropagateAtLaunch": true
                    },
                    {
                        "Key": "Scope",
                        "Value": "Stack created using CloudFormation scripts",
                        "PropagateAtLaunch": true
                    },
                    {
                        "Key": "CFStack",
                        "Value": {
                            "Ref": "AWS::StackId"
                        },
                        "PropagateAtLaunch": true
                    }
                ]
            }
        }
    }
}
